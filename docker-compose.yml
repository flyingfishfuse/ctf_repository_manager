version: "3"
#################################################################
##
## THIS FILE CONTAINS THE ENTRIES FOR THE INFRASTRUCTURE
# To create the network you run the following:
## docker network create net --gateway 192.168.0.1 --subnet 192.168.0.1/24
##    ALSO: --gateway --ip-range and --aux-address can be used
# https://docs.docker.com/engine/reference/commandline/network_create/
#################################################################

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    hostname: traefik
    domainname: moopbox.wtf
    command:
     - "--api.insecure=true"
     - "--api.dashboard=true"
     - "--providers.docker=true"
     - "--providers.docker.watch"
     - "--providers.docker.exposedbydefault=true"
     - "--api"
     - "--entrypoints.web.address=:80"
     - "--metrics"
     - "--metrics.prometheus=true"
     - "--log.level=DEBUG"
     #- "--log.filePath=./containers/traefik/logs/traefik.log"
     - "--log.filePath=/var/log/traefik.log"

     ## Required for explicitly setting domain of router
     - "--metrics.prometheus.manualrouting=true"

     # Entry point used to expose metrics.
     - "--metrics.prometheus.entryPoint=metrics"
     - "--entryPoints.metrics.address=:8082" 

      #Enable metrics on routers, entrypoints, and services
     - "--metrics.prometheus.addEntryPointsLabels=true"
     - "--metrics.prometheus.addrouterslabels=true"
     - "--metrics.prometheus.addServicesLabels=true"

     # Scarping Timing In Seconds
     - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
    networks:
      net:
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./container/traefik/logs/traefik.log:/var/log/traefik.log"
    ports:
      - target: 80
        published: 80
        mode: host
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`traefik.moopbox.wtf`)"
      # HTTP
        - "traefik.http.routers.traefik.entrypoints=web"
        - "traefik.http.routers.traefik.service=traefikService"
        - "traefik.http.routers.traefikService.service=api@internal"
        - "traefik.http.services.traefikService.loadBalancer.server.port=8080"
        #- "traefik.docker.network=net"
    restart: unless-stopped

#################################################################
#                   CTFd User Interface
#################################################################
  ctfd:
    image: ctfd/ctfd
    domainname: moopbox.wtf
    hostname: ctfd
    container_name: ctfd
    #build:
    #  context: ./containers/ctfd
    #  dockerfile: Dockerfile
    user: root
    restart: always
    environment:
      - UPLOAD_FOLDER=${UPLOAD_FOLDER}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - WORKERS=${WORKERS}
      - LOG_FOLDER=${LOG_FOLDER}
      - ACCESS_LOG=${ACCESS_LOG}
      - ERROR_LOG=${ERROR_LOG}
      - REVERSE_PROXY=${REVERSE_PROXY}
    volumes:
      - ctfd_logs:/var/log/CTFd
      - ctfd_uploads:/var/uploads
    depends_on:
      - db
#        - nginx
    expose:
      - 8000
    #ports:
    #  - 8000:8000
      #extra_hosts:
    #  - "nginx:${NGINXIP}"
    # I have been trying to avoid this
    networks:
      internal:
      net:
      #  ipv4_address: ${CTFDIP}
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.ctfd.rule=Host(`ctfd.moopbox.wtf`)"
        - "traefik.http.routers.ctfd.entrypoints=web"
        - "traefik.http.routers.ctfd.service=ctfdService"
        - "traefik.http.services.ctfdService.loadBalancer.server.port=8000"
        - "traefik.docker.network=net"
#################################################################
#                   network tools
#################################################################
#  parrot:
#    image: parrotsec/security
#    hostname: parrot
#    container_name: parrot
#    networks:
#      - internal
#      - net
#    volumes:
#      - "/run/docker.sock:/var/run/docker.sock"
#    restart: unless-stopped
  ####### METRICS
  ## Node Exporter : host hardware metrics
  ## Cadvisor      : container metrics
  ###############################################################################
  ########################################
  # Node Exporter configuration
  ########################################
  node-exporter:
    image: prom/node-exporter:latest
    container_name: nodeexporter
    hostname: nodeexporter
    domainname: moopbox.wtf
    restart: unless-stopped
    networks:
      internal:
      net:
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.nodeexporter.rule=Host(`nodeexporter.moopbox.wtf`)"
        #- "traefik.http.routers.nodeexporter.rule=Path(`/nodeexporter`)"
        - "traefik.http.routers.nodeexporter.entrypoints=web"
        - "traefik.http.routers.nodeexporter.service=nodeexporterService"
        - "traefik.http.services.nodeexporterService.loadBalancer.server.port=8080"
        #- "traefik.docker.network=internalnetwork"
        - "traefik.docker.network=net"

########################################
# Cadvisor configuration
########################################
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      internal:
    #ports:
    #  - 8080:8080
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.cadvisor.rule=Host(`cadvisor.moopbox.wtf`)"
        #- "traefik.http.routers.cadvisor.rule=Path(`/cadvisor`)"
        - "traefik.http.routers.cadvisor.entrypoints=web"
        - "traefik.http.routers.cadvisor.service=cadvisorService"
        - "traefik.http.services.cadvisorService.loadBalancer.server.port=8080"
        #- "traefik.docker.network=internalnetwork"
        - "traefik.docker.network=net"
###############################################################################
## Prometheus
# http://moopbox.wtf:9090/graph
# http://moopbox.wtf:9090/metrics
###############################################################################
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus
    domainname: moopbox.wtf
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - node-exporter
      - cadvisor
    #restart: unless-stopped
    volumes:
      - "./config/prometheus/:/etc/prometheus/"
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    #ports:
    #  - ${PROMETHEUS_METRICS_ENTRY_PORT}:9090
    networks:
      internal:
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheusContainer.rule=Host(`prometheus.moopbox.wtf`)"
        #- "traefik.http.routers.prometheusContainer.rule=Path(`/prometheus`)"
        - "traefik.http.routers.prometheusContainer.entrypoints=web"
        - "traefik.http.routers.prometheusContainer.service=prometheusService" 
        - "traefik.http.services.prometheusService.loadbalancer.server.port=9090"
        - "traefik.docker.network=net"

###############################################################################
## Graphana
# http://grafana.moopbox.wtf/
# 
# when middleware enabled:
# http://moopbox.wtf/grafana
###############################################################################
  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    domainname: moopbox.wtf
    depends_on:
      - prometheus
      - node-exporter
    environment:
      - "GF_SECURITY_ADMIN_PASSWORD=password"
      #- "GF_USERS_ALLOW_SIGN_UP=false"
      - "GF_SERVER_ROOT_URL=http://grafana.moopbox.wtf"
      - "GF_SERVER_DOMAIN=moopbox"
      #- "GF_INSTALL_PLUGINS=grafana-piechart-panel"
    networks:
      net:
    #orts:
    #  - 3000:3000
    volumes:
      - "grafana_data:/var/lib/grafana"
      - "./config/grafana/provisioning/:/etc/grafana/provisioning/"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.moopbox.wtf`)"
      # && PathPrefix(`/grafana`)"
     #- "traefik.http.routers.grafana.middlewares=grafanaddprefix"
     # - "traefik.http.middlewares.grafanaaddprefix.addprefix.prefix=/path"
      #- "traefik.http.routers.grafana.rule=Host(`grafana.moopbox.wtf`)""
      #- "traefik.http.routers.grafana.rule=Path(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.routers.grafana.service=grafanaService"
      - "traefik.http.services.grafanaService.loadBalancer.server.port=3000"
      #- "traefik.docker.network=internalnetwork"
      - "traefik.docker.network=net"
    restart: unless-stopped

################################################################
## CERTBOT enables ssl for the backend
# STATUS : NOT TESTED
#           trying nginx internal certbot first
#           seems simpler... two commands
# PROGRESS: nginx + certbot/internal seems to work ok
################################################################
#    certbot:
#      image: certbot/certbot
#      hostname: certbot
#      # checks for certbot renewal every 12 hours
#      #entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
#      depends_on:
#        - nginx
#      volumes:
#        - ${CERTBOTCONFVOLUMES}
#        - ${CERTBOTDATAVOLUMES}
#      
#      networks:
#        net:
#          ipv4_address: ${CERTBOTIP}
#          
#################################################################
#                   REDIS SERVER
#################################################################
  cache:
      image: redis
      depends_on:
        - traefik
        #- nginx
      hostname: cache
      container_name: cache
      #command: redis-server --appendonly yes
      ports:
        #- ${REDISPORT}:6379
        - 6379:6379
      volumes:
        - redis:/data
      restart: unless-stopped
      networks:
        internal:
#################################################################
#                   MYSQL SERVER
#################################################################
  db:
      image: mariadb:10.4.12
#      depends_on:
#        - nginx
      restart: always
      container_name: mariadb
      environment:
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_DATABASE=${MYSQL_DATABASE}
      # This command is required to set important mariadb defaults
      command: [mysqld, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci, --wait_timeout=28800, --log-warnings=0]
      volumes:
        - mysql:/var/lib/mysql
      networks:
          internal:
#################################################################
#     DNS SERVER
#################################################################   


#################################################################
#     NETWORKS SECTION
#################################################################      
networks:
  internal:
    internal: true

  net:
    external: true

volumes:
  redis: {}
  mysql: {}
  ctfd_logs: {}
  ctfd_uploads: {}
  prometheus_data: {}
  grafana_data: {}